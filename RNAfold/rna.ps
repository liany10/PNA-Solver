%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.6.2
%%CreationDate: Wed Dec 06 14:49:53 2023
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGCCGAUUUUGGCACUAGCACAUUUUUGCUUGUGUCUCUCCGCUCUGAGCAAUCAUGUGCAGUGCCAAUAUGGGAAA\
) } def
/len { sequence length } bind def

/coor [
[85.34159851 333.89099121]
[77.59005737 320.30984497]
[80.43267822 304.93280029]
[92.52725983 295.02041626]
[92.52725983 280.02041626]
[84.78995514 267.29315186]
[92.52725983 253.49298096]
[92.52725983 238.49298096]
[84.78995514 225.76570129]
[92.52725983 211.96553040]
[92.52725983 196.96553040]
[92.52725983 181.96553040]
[92.52725983 166.96553040]
[92.52725983 151.96553040]
[92.52725983 136.96553040]
[92.52725983 121.96553802]
[92.52725983 106.96553802]
[89.30719757 99.31665802]
[92.83734894 91.37215424]
[93.43370056 76.38401031]
[94.03004456 61.39587021]
[94.62639618 46.40773010]
[95.22274017 31.41958809]
[95.81909180 16.43144798]
[85.37576294 4.87399530]
[86.19405365 -10.31761551]
[97.27667999 -20.20250511]
[97.87302399 -35.19064713]
[98.46937561 -50.17878723]
[99.06571960 -65.16693115]
[99.66207123 -80.15506744]
[100.25841522 -95.14321136]
[99.96018219 -110.14024353]
[98.76843262 -125.09282684]
[97.57668304 -140.04541016]
[85.38773346 -150.10548401]
[83.96559143 -165.84565735]
[94.15397644 -177.92756653]
[109.90830231 -179.18321228]
[121.88181305 -168.86766052]
[122.97083282 -153.10093689]
[112.52926636 -141.23716736]
[113.72101593 -126.28458405]
[114.91276550 -111.33200073]
[117.61758423 -108.67993927]
[119.02404785 -104.47392273]
[118.36281586 -99.41558075]
[115.24655914 -94.54685974]
[114.65021515 -79.55872345]
[114.05386353 -64.57057953]
[113.45751953 -49.58243942]
[112.86116791 -34.59429932]
[112.26482391 -19.60615730]
[122.52705383 -8.87199974]
[122.13578033 6.33660221]
[110.80722809 17.02779579]
[110.21088409 32.01593781]
[109.61453247 47.00407791]
[109.01818848 61.99221802]
[108.42183685 76.98036194]
[107.82549286 91.96849823]
[107.52725983 106.96553802]
[107.52725983 121.96553802]
[107.52725983 136.96553040]
[107.52725983 151.96553040]
[107.52725983 166.96553040]
[107.52725983 181.96553040]
[107.52725983 196.96553040]
[107.52725983 211.96553040]
[115.26455688 225.76570129]
[107.52725983 238.49298096]
[107.52725983 253.49298096]
[115.26455688 267.29315186]
[107.52725983 280.02041626]
[107.52725983 295.02041626]
[119.62184143 304.93280029]
[122.46446228 320.30984497]
[114.71292114 333.89099121]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 75]
[5 74]
[7 72]
[8 71]
[10 69]
[11 68]
[12 67]
[13 66]
[14 65]
[15 64]
[16 63]
[17 62]
[19 61]
[20 60]
[21 59]
[22 58]
[23 57]
[24 56]
[27 53]
[28 52]
[29 51]
[30 50]
[31 49]
[32 48]
[33 44]
[34 43]
[35 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
